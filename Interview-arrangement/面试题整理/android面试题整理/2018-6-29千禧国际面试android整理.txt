1:ANR异常 如何产生，怎么处理!
  1.概念解释： 
    ANR : Application No Response。 

     在Android中，应用的响应性被活动管理器（Activity Manager）和窗口管理器（Window Manager）这两个系统服务所监视。
   当用户触发了输入事件（如键盘输入，点击按钮等）,如果应用5秒内没有响应用户的输入事件，那么，Android会认为该应用无响应，便弹出ANR对话框。

    2.用代码模拟：在主线程sleep8s.

    public void click(View view) {
        try {
            Thread.sleep(8000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }


    超过5秒，没有响应输入事件，弹出对话框：

    这里写图片描述

    3.为什么要弹出ANR异常？==》  提升用户的体验

    4.原理：android启动应用程序，开启一个进程，再 只开启一个单一的线程，该线程也称为主线程，
      主线程主要用于创建视图，显示视图，与用户交互（对视图控件的监听），对主线程也称为UI线程，对于耗时的操作，不应该在主线程运行，会影响与用户的交互

    5.如何解决： 
      对于耗时的操作，比如访问网络、访问数据库等操作，需要开辟子线程，在子线程处理耗时的操作，
      主线程主要实现UI的操作（创建、显示、交互）。这涉及到了子线程与主线程通信的问题。

    6.解决子线程与主线程通信问题： 
   （1）Thread-Handler-Message 
   （2）AsyncTask :这里面也封装了Handler  进度的调用 切换主线程 和 子线程


2:android基础知识!

   service几种启动方式,以及生命周期具体的调用过程

     第一种方式：通过StartService启动Service
          通过startService启动后，service会一直无限期运行下去，只有外部调用了stopService()或stopSelf()方法时，该Service才会停止运行并销毁。


    第二种方式：通过bindService启动Service
      bindService启动服务特点：

         1.bindService启动的服务和调用者之间是典型的client-server模式。调用者是client，service则是server端。service只有一个，
	     但绑定到service上面的client可以有一个或很多个。这里所提到的client指的是组件，比如某个Activity。

         2.client可以通过IBinder接口获取Service实例，从而实现在client端直接调用Service中的方法以实现灵活交互，
	     这在通过startService方法启动中是无法实现的。

         3.bindService启动服务的生命周期与其绑定的client息息相关。当client销毁时，client会自动与Service解除绑定。
	     当然，client也可以明确调用Context的unbindService()方法与Service解除绑定。当没有任何client与Service绑定时，Service会自行销毁。


  servcie如何尽量保活：
    1:1. onStartCommand方式中，返回START_STICKY
        START_NOT_STICKY
            如果返回START_NOT_STICKY，表示当Service运行的进程被Android系统强制杀掉之后，不会重新创建该Service。

        START_STICKY
          如果返回START_STICKY，表示Service运行的进程被Android系统强制杀掉之后，Android系统会将该Service依然设置为started状态（即运行状态），
	  但是不再保存onStartCommand方法传入的intent对象，android 中线程的启动的几种方式!

       START_REDELIVER_INTENT


    2.提高Service的优先级
      在AndroidManifest.xml文件中对于intent-filter可以通过android:priority = "1000"这个属性设置最高优先级，
       1000是最高值，如果数字越小则优先级越低，同时适用于广播。

    3.提升Service进程的优先级

         当系统进程空间紧张时，会依照优先级自动进行进程的回收。
         Android将进程分为6个等级，按照优先级由高到低依次为：

        前台进程foreground_app
        可视进程visible_app
        次要服务进程secondary_server
        后台进程hiddena_app
         内容供应节点content_provider
        空进程empty_app
         可以使用startForeground将service放到前台状态，这样低内存时，被杀死的概率会低一些。

    4.在onDestroy方法里重启Service
      当service走到onDestroy()时，发送一个自定义广播，当收到广播时，重新启动service。

     5.系统广播监听Service状态
     6.将APK安装到/system/app，变身为系统级应用



  android进程之间中如何共享传递数据:
       本文介绍了4种跨进程通讯的方式：Activity、ContentProvider、Broadcast 和 AIDL Service。 
       其中Activity可以跨进程调用其他应用程序的Activity；ContentProvider可以访问其他应用程序返回的 Cursor对象；
       Broadcast采用的是被动接收的方法，也就是说，客户端只能接收广播数据，而不能向发送广播的程序发送信息。
       AIDL Service可以将程序中的某个接口公开，这样在其他的应用程序中就可以象访问本地对象一样访问AIDL服务对象了。
       这4种跨进程通讯的方式可以应用在 不同的场合，例如，在需要显示可视化的界面时可以用Activity，需要返回记录集时可以用ContentProvider
       。至于在应用程序中具体要用 到哪一种或几种方式进行跨进程通讯，读者可以根据实际情况进行选择。



  android中消息机制具体的过程!
       Handler  MessageQueue  Looper     
      
       产生消息队列：Looper.prepare(一般调用)   Looper.prepareMainLooper() (activitYThread Main方法中调用的) 产生对应线程的 消息队列(只有一个)
                             继而进行轮询 死循环

       handler :发送消息，首先进行判断 Looper.prepare 如果threadLocal.getLooper 为空 报错,继而从looper获取消息队列，将对应的消息 放入到消息队列中!
                  如果在主线程中 ,轮询器一直在操作，如果在thread线程中，需要手动loop

       MessageQueue: 在将消息放置到队列之前：msg.target = this;  将handler 放置到message对象中，方便消息找到之后，执行回调!

     
  android 中子线程 更新ui的方式:
     第一种方法

       new Handler(context.getMainLooper()).post(new Runnable() {
 
           @Override
           public void run() {
               // 在这里执行你要想的操作 比如直接在这里更新ui或者调用回调在 在回调中更新ui
         }
      });



   第二种方法

       // 如果当前线程是UI线程,那么行动是立即执行。如果当前线程不是UI线程,操作是发布到事件队列的UI线程
      // 因为runOnUiThread是Activity中的方法，Context是它的父类，所以要转换成Activity对象才能使用
        ((Activity) context).runOnUiThread(new Runnable() {

            @Override
            public void run() {
                // 在这里执行你要想的操作 比如直接在这里更新ui或者调用回调在 在回调中更新ui
            }
        });



	第三种是使用Handler的方法，往Handler中发送一个消息，然后Handler接收到消息，再在Handler执行相应的操作
	//这是接收消息的handler
	private Handler handler = new Handler() {

	    @Override
	    public void handleMessage(Message msg) {
		super.handleMessage(msg);

		switch (msg.what) {

		case 1:
		      button1.setText("这是一按钮");
		      down = 1;
		    break;

		case 2:
		     down = 2;
		     button1.setText("这是二按钮");
		    break;
		}
	    }

	};
	//这是发消息的
	// 往handler发送一条消息 更改button的text属性
	Message message = handler.obtainMessage();
	message.what = 1;
	handler.sendMessage(message);

    
  View.post方法: 
       最后关于这个bug需要说明的是： 不是不可以在子线程中调用View.post，大家千万误会。相反的，这个方法的作用就是可以让我们在子线程中把任务放到主线程中执行。
                                                      但是要注意，要在View.onAttachToWindow之后在执行；否则，例如在onCreate里的子线程执行的话，那么这个Runnable将永远不会被执行了。


       参照:https://blog.csdn.net/scnuxisan225/article/details/49815269
     
  binder原理，aidl原理

   从framework层说
            Binder是andorid 跨进程之间通信的一种方式，还可以被理解为一个虚拟的物理设备，设备驱动是/dev/binder,
	    Binder是ServiceManager 连接各种的Manager(ActivityManger,WindowManager) 和 相应MangerService的桥梁
    
   从应用层说:
            Binder是客户端和服务端进行通信的媒介，binderService的时候 服务端会返回包含了服务端业务调用的binder对象，
	    通过该对象可以获取服务端提供的服务和数据(普通服务和aidl服务)


3:三级缓存原理如何管理下载10M的图片!
    LRUCache --map<string,soferefence> -- fileDisk -- 网络
   
    对应的强软弱虚的 引用说明:https://www.cnblogs.com/yw-ah/p/5830458.html


4:android 中的内存泄漏原因，什么是内存泄漏，什么是内存溢出!
    一般内存泄漏(traditional memory leak)的原因是：由忘记释放分配的内存导致的。（译者注：Cursor忘记关闭等）
    逻辑内存泄漏(logical memory leak)的原因是：当应用不再需要这个对象，当仍未释放该对象的所有引用。
 
    https://www.jianshu.com/p/ac00e370f83d

  
     Static Activities
         在类中定义了静态Activity变量，把当前运行的Activity实例赋值于这个静态变量。
          如果这个静态变量在Activity生命周期结束后没有清空，就导致内存泄漏。因为static变量是贯穿这个应用的生命周期的，所以被泄漏的Activity就会一直存在于应用的进程中，不会被垃圾回收器回收。

      
      Static Views
          类似的情况会发生在单例模式中，如果Activity经常被用到，那么在内存中保存一个实例是很实用的。正如之前所述，强制延长Activity的生命周期是相当危险而且不必要的，无论如何都不能这样做。

           特殊情况：如果一个View初始化耗费大量资源，而且在一个Activity生命周期内保持不变，那可以把它变成static，加载到视图树上(View Hierachy)，
	   像这样，当Activity被销毁时，应当释放资源。（译者注：示例代码中并没有释放内存，把这个static view置null即可，但是还是不建议用这个static view的方法）

    
      Inner Classes
          继续，假设Activity中有个内部类，这样做可以提高可读性和封装性。将如我们创建一个内部类，而且持有一个静态变量的引用，恭喜，内存泄漏就离你不远了（译者注：销毁的时候置空，嗯）。

      Anonymous Classes
         相似地，匿名类也维护了外部类的引用。所以内存泄漏很容易发生，当你在Activity中定义了匿名的AsyncTsk
。      当异步任务在后台执行耗时任务期间，Activity不幸被销毁了（译者注：用户退出，系统回收），这个被AsyncTask持有的Activity实例就不会被垃圾回收器回收，直到异步任务结束。


     Handler
        同样道理，定义匿名的Runnable，用匿名类Handler执行。Runnable内部类会持有外部类的隐式引用，被传递到Handler的消息队列MessageQueue中，在Message消息没有被处理之前，Activity实例不会被销毁了，于是导致内存泄漏


     Threads
         我们再次通过Thread和TimerTask来展现内存泄漏。


     TimerTask
         只要是匿名类的实例，不管是不是在工作线程，都会持有Activity的引用，导致内存泄漏。


     Sensor Manager
         最后，通过Context.getSystemService(int name)可以获取系统服务。这些服务工作在各自的进程中，帮助应用处理后台任务，处理硬件交互。
	 如果需要使用这些服务，可以注册监听器，这会导致服务持有了Context的引用，如果在Activity销毁的时候没有注销这些监听器，会导致内存泄漏。


     leakCanery 内存泄漏工具 :https://www.jianshu.com/p/1e7e9b576391

5:http原理，https 和http相比有哪些不同点(除了更加安全)，

  https的原理!
         我们都知道HTTPS能够加密信息，以免敏感信息被第三方获取。所以很多银行网站或电子邮箱等等安全级别较高的服务都会采用HTTPS协议。

         HTTPS简介
              HTTPS其实是有两部分组成：HTTP + SSL / TLS，也就是在HTTP上又加了一层处理加密信息的模块。服务端和客户端的信息传输都会通过TLS进行加密，所以传输的数据都是加密后的数据。
	      具体是如何进行加密，解密，验证的，且看下图。



          1. 客户端发起HTTPS请求
                这个没什么好说的，就是用户在浏览器里输入一个https网址，然后连接到server的443端口。

           2. 服务端的配置
                采用HTTPS协议的服务器必须要有一套数字证书，可以自己制作，也可以向组织申请。区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提
		示页面(startssl就是个不错的选择，有1年的免费服务)。这套证书其实就是一对公钥和私钥。如果对公钥和私钥不太理解，可以想象成一把钥匙和一个锁头，只是全世界只有你一个人有这把钥匙，
		你可以把锁头给别人，别人可以用这个锁把重要的东西锁起来，然后发给你，因为只有你一个人有这把钥匙，所以只有你才能看到被这把锁锁起来的东西。

           3. 传送证书
               这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等等。

           4. 客户端解析证书
              这部分工作是有客户端的TLS来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。如果证书没有问题，
	      那么就生成一个随即值。然后用证书对该随机值进行加密。就好像上面说的，把随机值用锁头锁起来，这样除非有钥匙，不然看不到被锁住的内容。

           5. 传送加密信息
               这部分传送的是用证书加密后的随机值，目的就是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了。

           6. 服务段解密信息
              服务端用私钥解密后，得到了客户端传过来的随机值(私钥)，然后把内容通过该值进行对称加密。所谓对称加密就是，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容，
	      而正好客户端和服务端都知道这个私钥，所以只要加密算法够彪悍，私钥够复杂，数据就够安全。

           7. 传输加密后的信息
                这部分信息是服务段用私钥加密后的信息，可以在客户端被还原。

           8. 客户端解密信息
                客户端用之前生成的私钥解密服务段传过来的信息，于是获取了解密后的内容。整个过程第三方即使监听到了数据，也束手无策。


   https 和 http的区别:
      一、HTTP和HTTPS的基本概念

              HTTP：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），
	                用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。

              HTTPS：是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，
	                   HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。

              HTTPS协议的主要作用可以分为两种：一种是建立一个信息安全通道，
	                   来保证数据传输的安全；另一种就是确认网站的真实性。


    HTTPS和HTTP的区别主要如下：

         1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。

         2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。

         3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。

         4、http的连接很简单，是无状态的；HTTPS协议是由SSL + HTTP 协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。


  tcp和udp的原理，三次握手和四次挥手的详细过程!
          1:https://github.com/jawil/blog/issues/14



6:热修复的原理!
   https://blog.csdn.net/csdn_lqr/article/details/78534065
   dex文件 加载！

   https://blog.csdn.net/itachi85/article/details/79522200  讲解的比较全!


7:如何查看andorid的错误日志
    


8:RxJava中的详细情况,需要整理!
   RxAndroid如何进行线程的切换!

   https://blog.csdn.net/ljngya/article/details/80068465



9:android zygote 进程fork SystemServer进程

  https://www.cnblogs.com/samchen2009/p/3294713.html




10:动态更新 和 插件化!
    


11：设计模式改变
   http://www.runoob.com/design-pattern/abstract-factory-pattern.html



12:android 系统结构讲解: https://www.cnblogs.com/xxxgod/articles/8981928.html